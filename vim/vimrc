" Gotta be first
set nocompatible

filetype off

set runtimepath+=~/.vim/bundle/Vundle.vim
" set runtimepath+=/usr/local/opt/fzf
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

" ----- UI: airline + theme -------------------------------------------
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'morhetz/gruvbox'
Plugin 'ryanoasis/vim-devicons'

" ----- IDE utils -----------------------------------------------------
Plugin 'scrooloose/nerdtree'
Bundle 'jistr/vim-nerdtree-tabs'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'majutsushi/tagbar'
Plugin 'junegunn/fzf'
Plugin 'mileszs/ack.vim'
Plugin 'qpkorr/vim-bufkill'
Plugin 'tpope/vim-eunuch'

" ----- Vim as a programmer's text editor -----------------------------
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-commentary'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'xolox/vim-misc'
Plugin 'tpope/vim-surround'
Plugin 'editorconfig/editorconfig-vim'
" Plugin 'Valloric/YouCompleteMe'
Plugin 'tpope/vim-unimpaired'
Plugin 'rizzatti/dash.vim'
" Plugin 'joonty/vim-do'

" ----- LaTeX ---------------------------------------------------------
Plugin 'lervag/vimtex'

" ----- Working with Git ----------------------------------------------
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-fugitive'

" ----- Other text editing features -----------------------------------
Plugin 'Raimondi/delimitMate'

" ----- man pages, tmux -----------------------------------------------
" Plugin 'jez/vim-superman'
Plugin 'christoomey/vim-tmux-navigator'

" ----- Syntax plugins ------------------------------------------------
Plugin 'w0rp/ale'

" ----- Python plugins ------------------------------------------------
" Plugin 'davidhalter/jedi-vim'
" Plugin 'python-mode/python-mode'

" ----- Markdown plugins ----------------------------------------------
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'

" ----- Web Development -----------------------------------------------
Plugin 'othree/html5.vim'


call vundle#end()

filetype plugin indent on

" --- General settings ---
" colors
set background=dark
let g:gruvbox_bold = 1
let g:gruvbox_italic = 1
let g:gruvbox_number_column = 'bg1'
let g:gruvbox_sign_column = 'bg1'
let g:gruvbox_contrast_dark = 'medium'
colorscheme gruvbox
syntax on
" ui config

" Config number lines
set number relativenumber
" Show line number in INSERT mode, and relative line numbers in NORMAL mode
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

set cursorline
filetype indent on
set wildmenu
set exrc
set lazyredraw
set showmatch
" set textwidth=80
" set wrapmargin=2
set colorcolumn=+1        " highlight column after 'textwidth'
set encoding=utf-8
" set shortmess=a
" search
set incsearch
set hlsearch
nnoremap <leader><space> :nohlsearch<CR>
" folding
set foldenable
set foldlevelstart=10
set foldnestmax=10
" noremap <space> za
set foldmethod=indent
set conceallevel=2

set clipboard=unnamed

set backspace=indent,eol,start
set ruler
set termguicolors

syntax on

set mouse=a

if has('nvim')
	let g:loaded_sensible=0
endif

let g:python_host_prog = '/usr/local/bin/python'
let g:python3_host_prog = '/usr/local/bin/python3'

" ----- bling/vim-airline settings -----
set laststatus=2				" Always show statusbar
let g:airline_powerline_fonts = 1		" Powerline fonts
let g:airline_detect_paste=1			" Show PASTE if in paste mode
let g:airline#extensions#tabline#enabled = 1	" Show airline for tabs too
let g:airline_theme='gruvbox'

" ----- scrooloose/nerdtree -----
" Open/close NERDTree with \t
map <Leader>t <plug>NERDTreeTabsToggle<CR>


" ----- ctrlpvim/ctrlp -----
" Setup some default ignores
let g:ctrlp_show_hidden = 1
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.(git|hg|svn)|\_site)$',
  \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg|DS_Store|pyc)$',
\}

" Use the nearest .git directory as the cwd
" This makes a lot of sense if you are working on a project that is in version
" control. It also supports works with .svn, .hg, .bzr.
let g:ctrlp_working_path_mode = 'r'

" Use a leader instead of the actual named binding
" nmap <leader>p :CtrlP<cr>

" ----- majutsushi/tagbar settings -----
" Open/close tagbar with \b
nmap <silent> <leader>b :TagbarToggle<CR>
" Close tagbar when jumo to a tag
let g:tagbar_autoclose = 1
let g:tagbar_sort = 0

" ----- junegunn/fzf -----
"  Mappings
nmap ; :Buffers<CR>
nmap <Leader>f :Files<CR>
nmap <Leader>r :Tags<CR>

" ----- lervag/vimtex -----
"  Continuous compilation
let g:vimtex_compiler_latexmk = {
        \ 'callback' : 1,
        \ 'continuous' : 1,
        \ 'executable' : 'latexmk',
\}
let g:vimtex_latexmk_continuous = 1
let g:vimtex_fold_enable = 1


" ----- airblade/vim-gitgutter settings -----
" In vim-airline, only display "hunks" if the diff is non-zero
let g:airline#extensions#hunks#non_zero_only = 1

" ----- Raimondi/delimitMate settings -----
let g:delimitMate_expand_cr = 1
augroup mydelimitMate
  au!
  au FileType markdown let b:delimitMate_nesting_quotes = ["`"]
  au FileType tex let b:delimitMate_quotes = ""
  au FileType tex let b:delimitMate_matchpairs = "(:),[:],{:},`:'"
  au FileType python let b:delimitMate_nesting_quotes = ['"', "'"]
augroup END

" ----- jez/vim-superman settings -----
" better man page support
" noremap K :SuperMan <cword><CR>

" ----- w0rp/ale -----
let g:ale_lint_on_insert_leave = 1
let g:ale_sign_error = '✘'
let g:ale_sign_warning = '▲'
let g:ale_completion_enabled = 1
let g:ale_fix_on_save = 1
let g:ale_fixers = {
	\ 'javascript': ['prettier', 'remove_trailing_lines'],
	\ 'json': ['prettier', 'remove_trailing_lines'],
	\ 'python': ['yapf', 'remove_trailing_lines'],
	\ 'css': ['prettier', 'remove_trailing_lines'],
	\ 'tex': ['remove_trailing_lines'],
	\ 'html': ['remove_trailing_lines'],
\}

" ----- davidhalter/jedi-vim -----
" let g:jedi#use_splits_not_buffers = "right"
augroup jedi
	autocmd FileType python setlocal completeopt-=preview
augroup END


" ----- plasticboy/vim-markdown -----
let g:vim_markdown_math = 1
let g:vim_markdown_frontmatter = 1



if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

augroup tabindent
	autocmd FileType yaml setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
	autocmd FileType html setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
	autocmd FileType js setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
	autocmd FileType css setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
	autocmd FileType json setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
augroup END

" ----- custom key mappings -----
" set <M-j> = "\ej"
" set <M-l> = "\el"
" map <M-j> :bn
" map <M-l> :bp
" Maps for when capitalized letters appear
" command W :w<CR>
" command Wq :wq<CR>
" command Q :q<CR>
" command WQ :wq<CR>
inoremap jj <ESC><CR>
map <C-w> :BD<CR>:redraw<CR>
nmap <C-e> :e#<CR>

nmap j gj
nmap k gk

set secure


