
" Information {{{
"       Author: Alberto Montes
" }}}

" Plugins {{{
        set nocompatible
        filetype off
        set runtimepath+=~/.vim/bundle/Vundle.vim
        set runtimepath+=/usr/local/opt/fzf
        set runtimepath+=~/.fzf
        call vundle#begin()

        " Plugin Management:
        Plugin 'VundleVim/Vundle.vim'

        " UI:
        " Airline
        Plugin 'itchyny/lightline.vim'
        Plugin 'mgee/lightline-bufferline'
        Plugin 'maximbaz/lightline-ale'
        Plugin 'albertomontesg/lightline-asyncrun'
        " Colorschemes
        Plugin 'chriskempson/base16-vim'
        " NerdTree with icons and git
        Plugin 'Xuyuanp/nerdtree-git-plugin'
        Plugin 'ryanoasis/vim-devicons'
        Plugin 'scrooloose/nerdtree'
        Plugin 'jistr/vim-nerdtree-tabs'
        " Active pane highlight
        Plugin 'blueyed/vim-diminactive'

        " IDE:
        " Tags
        Plugin 'majutsushi/tagbar'
        " Syntax linter and fix
        Plugin 'w0rp/ale'
        " Fuzzy Finding
        Plugin 'junegunn/fzf.vim'
        " Completion
        if has('nvim')
                Plugin 'roxma/nvim-completion-manager'
        endif
        " Snippets
        if has('python') || has('python3')
                Plugin 'SirVer/ultisnips'
        endif
        Plugin 'honza/vim-snippets'

        " VIM: as programmer editor
        " Defaults
        Plugin 'tpope/vim-sensible'
        " UNIX shell commands
        Plugin 'tpope/vim-eunuch'
        " Comments
        Plugin 'tpope/vim-commentary'
        " Quoting surround
        Plugin 'tpope/vim-surround'
        " Pairs of handy bracket mappings
        Plugin 'tpope/vim-unimpaired'
        " Close buffers
        Plugin 'qpkorr/vim-bufkill'
        " Auto save
        Plugin '907th/vim-auto-save'
        " Highlight yank text
        Plugin 'machakann/vim-highlightedyank'
        " Multiple cursors
        Plugin 'terryma/vim-multiple-cursors'
        " Miscellaneus
        Plugin 'xolox/vim-misc'
        " tmux integration
        Plugin 'tmux-plugins/vim-tmux-focus-events'
        Plugin 'christoomey/vim-tmux-navigator'
        " Closing quotes and parenthesis
        Plugin 'Raimondi/delimitMate'
        " Git integration
        Plugin 'airblade/vim-gitgutter'
        Plugin 'tpope/vim-fugitive'
        " Run async shell commands
        Plugin 'skywind3000/asyncrun.vim'

        " Programming Languages:
        " LaTeX
        Plugin 'lervag/vimtex'
        " tmux
        Plugin 'tmux-plugins/vim-tmux'
        " Markdown
        Plugin 'godlygeek/tabular'
        Plugin 'plasticboy/vim-markdown'
        " Web Development
        Plugin 'othree/html5.vim'
        Plugin 'othree/csscomplete.vim'
        Plugin 'roxma/nvim-cm-tern'
        " C/C++
        Plugin 'roxma/ncm-clang'
        " Go
        Plugin 'fatih/vim-go'
        " CoffeeScript
        Plugin 'kchmck/vim-coffee-script'

        call vundle#end()
" }}}

" General Settings {{{
        filetype plugin indent on
        " UI config
        if !has('gui_running')
                set t_Co=256
        endif
        if v:version >= 800
                set termguicolors
                " let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
                " let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
        endif
        " let g:lightline = {'colorscheme': 'materia'}
        let base16colorspace=256  " Access colors present in 256 colorspace
        set background=dark
        " colorscheme gruvbox
        colorscheme base16-materia
        set noshowmode
        syntax on
        set laststatus=2        " Always show statusbar
        set showtabline=2
	set signcolumn=yes	" Always show the sign column
        " Config number lines
        set number relativenumber

        " Tabulation
        set expandtab

        set formatoptions-=t
        set cursorline
        set wildmenu
        set exrc
        set lazyredraw
        set showmatch
        " Highlight all the columns after 'textwidth'
        " let &colorcolumn=join(map(copy(range(1, 256)), '"+" . v:val'), ',')
        set colorcolumn=+1
        let &colorcolumn="80,".join(range(120,999),",")
        set encoding=utf-8
        " search
        set incsearch
        set hlsearch
        if has('nvim')
                set inccommand=split
        endif
        " folding
        set foldenable
        set foldlevelstart=10
        set foldnestmax=10
        set foldmethod=indent
        set conceallevel=2

        set clipboard=unnamed

        set backspace=indent,eol,start
        set ruler
        " highlight Comment cterm=italic

        syntax on

        if has('mouse')
                set mouse=a
        endif

        if has('nvim')
                let g:python_host_prog = '/usr/local/bin/python2'
                let g:python3_host_prog = '/usr/local/bin/python3'
        endif

        set secure

" }}}


" Mappings {{{
        let g:mapleader = "\<space>"

        " Split navigation
        " normal mode
        nnoremap <M-Down> <C-W><C-J>
        nnoremap <M-Up> <C-W><C-K>
        nnoremap <M-Right> <C-W><C-L>
        nnoremap <M-Left> <C-W><C-H>
        " insert mode
        inoremap <M-Down> <Esc><C-W><C-J>i
        inoremap <M-Up> <Esc><C-W><C-K>i
        inoremap <M-Right> <Esc><C-W><C-L>i
        inoremap <M-Left> <Esc><C-W><C-H>i

        nnoremap <leader><space> :nohlsearch<CR>
        map <C-w> :BD<CR>:redraw<CR>

        " Visual vertical movement for long lines
        nmap j gj
        nmap k gk

        " Keep selected text selected when fixing indentation
        vnoremap < <gv
        vnoremap > >gv

        if has('nvim')
                tnoremap <Esc> <C-\><C-n>
                tnoremap <M-[> <Esc>
                tnoremap <C-v><Esc> <Esc>
        endif
" }}}
