" Personal .vimrc
" by Alberto Montes
"

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" ================ VIM PLUG ================
call plug#begin()

" UI:
" Colorscheme
Plug 'dracula/vim', { 'as': 'dracula' }
" Plug 'morhetz/gruvbox'
" lightline
Plug 'itchyny/lightline.vim'
" Plug 'shinchu/lightline-gruvbox.vim'
Plug 'mgee/lightline-bufferline'
Plug 'maximbaz/lightline-ale'
Plug 'albertomontesg/lightline-asyncrun'
" NERDTree
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'ryanoasis/vim-devicons'
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
" Active pane highlight
" Plug 'blueyed/vim-diminactive'

" IDE:
" Tags
Plug 'majutsushi/tagbar'
" Syntax linter and formatter
Plug 'w0rp/ale'
" Fuzzy finding
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
" Completion
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }
" Snippets
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'ervandew/supertab'

" VIM: as programmer editor
" Defaults
Plug 'tpope/vim-sensible'
" UNIX shell commands
Plug 'tpope/vim-eunuch'
" Comments
Plug 'tpope/vim-commentary'
" Quoting surround
Plug 'tpope/vim-surround'
" Pairs of handy bracket mappings
Plug 'tpope/vim-unimpaired'
" Align text
Plug 'junegunn/vim-easy-align'
" Close buffers
Plug 'qpkorr/vim-bufkill'
" Auto save
" Plug '907th/vim-auto-save'
" Highlight yank text
Plug 'machakann/vim-highlightedyank'
" Multiple cursors
Plug 'terryma/vim-multiple-cursors'
" Miscellaneus
" Plug 'xolox/vim-misc'
" tmux integration
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'christoomey/vim-tmux-navigator'
" Closing quotes and parenthesis
Plug 'Raimondi/delimitMate'
" Git integration
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
" Run async shell commands
Plug 'skywind3000/asyncrun.vim'
" Fade the unfocus panes
Plug 'TaDaa/vimade'

" Programming Languages:
" Python
" Plug 'davidhalter/jedi-vim', {'on_ft': 'python'}
Plug 'zchee/deoplete-jedi'
" C++
Plug 'Shougo/deoplete-clangx'
" LaTeX
Plug 'lervag/vimtex'
" Plug 'lionawurscht/deoplete-biblatex'
" tmux
Plug 'tmux-plugins/vim-tmux'
" nginx
Plug 'vim-scripts/nginx.vim'
" Markdown
Plug 'fszymanski/deoplete-emoji'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
" Javascript
Plug 'carlitux/deoplete-ternjs', { 'do': 'npm install -g tern' }
" Web Development
Plug 'othree/html5.vim'
Plug 'othree/csscomplete.vim'
" CoffeeScript
Plug 'kchmck/vim-coffee-script'
" Go
Plug 'nsf/gocode'
Plug 'zchee/deoplete-go'
" Zsh
Plug 'zchee/deoplete-zsh'
" VimL
Plug 'Shougo/neco-vim'

call plug#end()


" General Config

let g:mapleader = "\<space>"
set backspace=indent,eol,start
set history=1000
set showcmd
set showmode
set visualbell

" ================ Suggestions ================
" show wild menu (menu of suggestions) when typing commands in command mode
set path+=**
set wildmenu


" ================ File management ==================

" Turn off swap files
set noswapfile
set nobackup
set nowritebackup

" reload files changed outside vim
set autoread
augroup fileread
" Triger `autoread` when files changes on disk
  autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * if mode() != 'c' | checktime | endif
  " Notification after file change
  autocmd FileChangedShellPost *
    \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None
augroup END


" ================ Folding ==================

set nofoldenable
set foldmethod=indent
set foldlevelstart=10
set foldnestmax=10


" ================ Srolling =========================

" Start scrolling when we're 8 lines away from margins
set scrolloff=8


" ================ Encoding =========================

"set encoding to utf8
"Necessary to show Unicode glyphs
set encoding=utf-8


" ================ Appearance =========================

syntax on
set background=dark
if (has('termguicolors'))
  set termguicolors
endif

set t_Co=256

if has('nvim')
	let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif

" Configure Lightline appearance
let g:lightline = {}
let g:lightline.colorscheme = 'dracula'
" Color scheme
let g:gruvbox_contrast_dark = 'hard'
let g:gruvbox_sign_column = 'bg0'
" colorscheme gruvbox
colorscheme dracula


set noshowmode

set laststatus=2
set showtabline=2
set signcolumn=yes
set cursorline
set number relativenumber
set showmatch

" Vertical separator
set fillchars+=vert:â”‚

" This improves vim performance
set lazyredraw

set colorcolumn=+1
" Also colorize the columns higher than 120
" let &colorcolumn="80,".join(range(120,999),",")

" Set by default tabulation to 2 spaces
set expandtab
set shiftwidth=2
set tabstop=2
set softtabstop=2


" ================ Mouse Support ================
if has('mouse')
  set mouse=a
endif


" ================ Search ================
set incsearch
set hlsearch
set ignorecase
set smartcase
if has('nvim')
	set inccommand=split
endif


" ================ Clipboard ================
set clipboard=unnamed


" ================ Abbreviations ====================

iab wiht with
iab whit with
iab ture true
iab Ture True
iab flase false
iab Flase False
iab wieght weight
iab hieght height
iab tihs this
iab mian main


" ================ Mappings ================
nnoremap <leader><space> :nohlsearch<CR>
map <C-w> :BD<CR>:redraw<CR>

" For now disable arrow keys
" noremap <Up> <NOP>
" noremap <Down> <NOP>
" noremap <Left> <NOP>
" noremap <Right> <NOP>

" Vertical Movement
nmap j gj
nmap k gk

" Sort unique selected lines
vmap <F5> :sort u<CR>

" Keep selected text selected when fixing indentation
nmap <silent> <Tab> >>
nmap <silent> <S-Tab> <<
" for insert mode
inoremap <S-Tab> <C-d>
" for visual mode
vnoremap < <gv
vnoremap > >gv
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

" Fast movement between buffers
nnoremap <silent> <C-l> :bn<CR>
nnoremap <silent> <C-h> :bp<CR>

" Navigation as tmux panes
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <M-Right> :TmuxNavigateRight<CR>
nnoremap <silent> <M-Left> :TmuxNavigateLeft<CR>
nnoremap <silent> <M-Up> :TmuxNavigateUp<CR>
nnoremap <silent> <M-Down> :TmuxNavigateDown<CR>
